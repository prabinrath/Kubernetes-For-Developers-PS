apiVersion: v1
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: local-storage
provisioner: kubernetes.io/no-provisioner
# The reclaim policy applies to the persistent volumes not the storage class itself. 
# pvs and pvcs that are created using that storage class will inherit the reclaim policy set here.
reclaimPolicy: Retain
volumeBindingMode: WaitForFirstConsumer

---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: demo-pv
spec:
  capacity:
    storage: 100Mi
  # volumeMode block feature gate enabled by default with 1.13+
  volumeMode: Filesystem
  accessModes:
  - ReadWriteOnce
  # StorageClass has a reclaim policy default so it'll be "inherited" by the PV
  # persistentVolumeReclaimPolicy: Retain
  storageClassName: local-storage
  local:
    path: /tmp/k8s-persistent-db #NOT-WORKING on WSL Docker
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: kubernetes.io/hostname
          operator: In
          values:
          - docker-desktop

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: demo-pvc
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: local-storage
  resources:
    requests:
      storage: 50Mi

---

apiVersion: v1
kind: Service
metadata:
  name: demo-app-loadbalancer
spec:
  type: LoadBalancer
  selector:
    app: demo-app
  ports:
  - name: "80"
    port: 80
    targetPort: 80

---

apiVersion: v1
kind: Pod
metadata:
  name: demo-app-persistent-volume
  labels:
    app: demo-app
spec:
  volumes:
  - name: demo-volume
    persistentVolumeClaim:
      claimName: demo-pvc
  containers:
  - name: my-nginx
    image: nginx:alpine
    volumeMounts:
    - name: demo-volume
      mountPath: /usr/share/nginx/html
      readOnly: true
  - name: html-updater
    image: alpine
    command: ["/bin/sh", "-c"]
    args:
    - while true; do date >> /html/index.html; sleep 10; done
    volumeMounts:
    - name: demo-volume
      mountPath: /html